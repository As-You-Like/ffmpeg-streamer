<!DOCTYPE html>
<html>
<head>

    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>

    <title><%= title %></title>

    <link rel="stylesheet" href="/mdi/material-icons.css"/>
    <link rel="stylesheet" href="/mdl/material.deep_orange-blue.min.css"/>

    <style>

        body {
            background: lightgrey;
        }

        .mdl-cell {
            background: black;
            color: white;
        }

        .mdl-cell > span {
            display: block;
            max-height: 240px;
            width: 100%;
            overflow: auto;
            padding: 5px;
        }

        .mdl-cell.player {
            text-align: center;
        }

        .mdl-cell.data {
            display: flex;
            align-items: center;
            text-align: left;
            padding: 5px;
        }

        .form {
            background: none;
            text-align: center;
        }

        .mdl-card__media {
            margin: 0;
            background: none;
            height: 100%;
        }

        .mdl-card__media > img, .mdl-card__media > video {
            width: 100%;
            margin: 0;
            padding: 0;
            background: black;
        }

        .mdl-card__supporting-text {
            color: white;
        }

    </style>

    <script src="/assets/hls.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script src="/javascripts/player.min.js"></script>
    <script defer src="/mdl/material.min.js"></script>

</head>
<body>

<div class="content-grid mdl-grid">

    <div class="player mdl-card mdl-shadow--8dp mdl-cell mdl-cell--4-col-desktop mdl-cell--4-col-tablet mdl-cell--4-col-phone">
        <figure class="mdl-card__media">
            <img id="mjpegImg" src="/mjpeg/test.mjpg"/>
        </figure>
        <div class="mdl-card__supporting-text">
            mjpeg src: <a href="/mjpeg/test.mjpg">test.mjpg</a>
        </div>
    </div>

    <div class="player mdl-card mdl-shadow--8dp mdl-cell mdl-cell--4-col-desktop mdl-cell--4-col-tablet mdl-cell--4-col-phone">
        <figure class="mdl-card__media">
            <video id="mp4Video" muted/>
        </figure>
        <div class="mdl-card__supporting-text">
            progressive mp4 src: <a href="/mp4/test.mp4">test.mp4</a>
        </div>
    </div>

    <div class="player mdl-card mdl-shadow--8dp mdl-cell mdl-cell--4-col-desktop mdl-cell--4-col-tablet mdl-cell--4-col-phone">
        <figure class="mdl-card__media">
            <video id="hlsjsVideo" muted/>
        </figure>
        <div class="mdl-card__supporting-text">
            hls.js src: <a href="/hls/test.m3u8">test.m3u8</a>
        </div>
    </div>

    <div class="player mdl-card mdl-shadow--8dp mdl-cell mdl-cell--4-col-desktop mdl-cell--4-col-tablet mdl-cell--4-col-phone">
        <figure class="mdl-card__media">
            <img id="jpegImg"/>
        </figure>
        <div class="mdl-card__supporting-text">
            jpeg via socket.io
        </div>
    </div>

    <div class="player mdl-card mdl-shadow--8dp mdl-cell mdl-cell--4-col-desktop mdl-cell--4-col-tablet mdl-cell--4-col-phone">
        <figure class="mdl-card__media">
            <video id="hlsVideo" muted playsinline/>
        </figure>
        <div class="mdl-card__supporting-text">
            native hls src: <a href="/hls/test.m3u8">test.m3u8</a>
        </div>
    </div>

    <div class="player mdl-card mdl-shadow--8dp mdl-cell mdl-cell--4-col-desktop mdl-cell--4-col-tablet mdl-cell--4-col-phone">
        <figure class="mdl-card__media">
            <video id="mseVideo" muted/>
        </figure>
        <div class="mdl-card__supporting-text">
            mse via socket.io
        </div>
    </div>

    <div class="data mdl-shadow--8dp mdl-cell mdl-cell--6-col-desktop mdl-cell--8-col-tablet mdl-cell--4-col-phone">
        <span id="stderr">ffmpeg stderr...</span>
    </div>

    <div class="data mdl-shadow--8dp mdl-cell mdl-cell--3-col-desktop mdl-cell--4-col-tablet mdl-cell--4-col-phone">
        <span id="progress">ffmpeg progress...</span>
    </div>

    <div class="data mdl-shadow--8dp mdl-cell mdl-cell--3-col-desktop mdl-cell--4-col-tablet mdl-cell--4-col-phone">
        <span id="m3u8">m3u8 playlist...</span>
    </div>

    <div class="data mdl-shadow--8dp mdl-cell mdl-cell--4-col-desktop mdl-cell--4-col-tablet mdl-cell--4-col-phone">
        <span id="mime">codec info...</span>
    </div>

    <div class="data mdl-shadow--8dp mdl-cell mdl-cell--8-col-desktop mdl-cell--4-col-tablet mdl-cell--4-col-phone">
        <span><%= params %></span>
    </div>

    <div class="mdl-cell mdl-cell--12-col form">
        <form method="POST" action="/">
            <button name="action" type="submit" value="Exit"
                    class="mdl-shadow--8dp mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent">
                <i
                        class="material-icons">clear</i></button>
            <button name="action" type="submit" value="Stop"
                    class="mdl-shadow--8dp mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent">
                <i
                        class="material-icons">undo</i></button>
        </form>
    </div>

</div>

<script>
    const hlsjsVideo = document.getElementById('hlsjsVideo');
    if (Hls.isSupported()) {
        const hls = new Hls({
            //debug : true,
            //maxBufferLength: 15,
            //maxBufferHole: 1,
            //maxSeekHole: 2,
            //capLevelToPlayerSize: true,
            //startFragPrefetch: false,
            //autoStartLoad: false,
            manifestLoadingTimeOut: 1000,
            manifestLoadingMaxRetry: 30,
            manifestLoadingRetryDelay: 500
            //,enableCEA708Captions: true
        });
        hls.on(Hls.Events.ERROR, (event, data) => {
            console.log('hls error', data);
            if (data.type === 'networkError') {
                //hlsjsVideo.parentElement.innerHTML = '<p>hls.js network error</p>';
            }
        });
        hls.on(Hls.Events.MANIFEST_PARSED, () => {
            hlsjsVideo.play();
        });
        hls.attachMedia(hlsjsVideo);
        hls.loadSource('/hls/test.m3u8?hlsjs');
    } else {
        hlsjsVideo.parentElement.innerHTML = '<p>hls.js not supported</p>';
    }
</script>

<script>
    const jpegImg = document.getElementById('jpegImg');
    const jpegSocket = io.connect(`${location.origin}/jpeg`, {
        transports: ['websocket'],
        forceNew: true,
        reconnection: true,
        reconnectionDelay: 500
    });
    jpegSocket.on('jpeg', (data) => {
        const arrayBufferView = new Uint8Array(data);
        const blob = new Blob([arrayBufferView], {type: 'image/jpeg'});
        const urlCreator = window.URL || window.webkitURL;
        jpegImg.src = urlCreator.createObjectURL(blob);
    });
</script>

<script>
    const progress = document.getElementById('progress');
    const progressSocket = io.connect(`${location.origin}/progress`, {
        transports: ['websocket'],
        forceNew: true,
        reconnection: true,
        reconnectionDelay: 500
    });
    progressSocket.on('progress', (data) => {
        progress.innerText = data;
    });
</script>

<script>
    const m3u8 = document.getElementById('m3u8');
    const m3u8Socket = io.connect(`${location.origin}/m3u8`, {
        transports: ['websocket'],
        forceNew: true,
        reconnection: true,
        reconnectionDelay: 500
    });
    m3u8Socket.on('m3u8', (data) => {
        m3u8.innerText = data;
    });
</script>

<script>
    const mime = document.getElementById('mime');
    const mimeSocket = io.connect(`${location.origin}/mse`, {
        transports: ['websocket'],
        forceNew: true,
        reconnection: true,
        reconnectionDelay: 500
    });
    mimeSocket.on('mime', (data) => {
        const type = data.toLowerCase();
        let message = type;
        if ('MediaSource' in window) {
            message += '\nMediaSource.isTypeSupported = ' + MediaSource.isTypeSupported(type);
        } else {
            message += '\nMediaSource not supported by browser';
        }
        const vid = document.createElement('video');
        message += '\nHTMLMediaElement.canPlayType = ' + vid.canPlayType(type);
        mime.innerText = message;
        mimeSocket.disconnect();
    });
    mimeSocket.emit('message', 'mime');
</script>

<script>
    const stderrArr = [];
    const stderr = document.getElementById('stderr');
    const stderrSocket = io.connect(`${location.origin}/stderr`, {
        transports: ['websocket'],
        forceNew: true,
        reconnection: true,
        reconnectionDelay: 500
    });
    stderrSocket.on('stderr', (data) => {
        stderrArr.push(data);
        while (stderrArr.length > 200) {
            stderrArr.shift();
        }
        stderr.innerText = stderrArr.join('\n');
    });
</script>

<script>
    const mp4Video = document.getElementById('mp4Video');
    let mp4VideoLoads = 0;
    const loadMp4Video = () => {
        mp4Video.src = '/mp4/test.mp4?t=' + new Date().toLocaleTimeString().split(' ').join('_');
        mp4Video.load();
        mp4VideoLoads++;
    };
    mp4Video.addEventListener('canplay', (evt) => {
        mp4VideoLoads = 0;
        mp4Video.play();
    });
    mp4Video.addEventListener('error', (evt) => {
        if (mp4VideoLoads > 30) {
            mp4Video.parentElement.innerHTML = '<p>progressive mp4 playback error</p>';
            return;
        }
        setTimeout(loadMp4Video, 500);
    });
    if (mp4Video.canPlayType('video/mp4')) {
        loadMp4Video();
    } else {
        mp4Video.parentElement.innerHTML = '<p>progressive mp4 not supported</p>';
    }
</script>

<script>
    const hlsVideo = document.getElementById('hlsVideo');
    let hlsVideoLoads = 0;
    const loadHlsVideo = () => {
        hlsVideo.src = '/hls/test.m3u8?t=' + new Date().toLocaleTimeString().split(' ').join('_');
        hlsVideo.load();
        hlsVideoLoads++;
    };
    hlsVideo.addEventListener('canplay', (evt) => {
        //console.log('can play');
        hlsVideoLoads = 0;
        hlsVideo.play();
    });
    hlsVideo.addEventListener('error', (evt) => {
        if (hlsVideoLoads > 30) {
            hlsVideo.parentElement.innerHTML = '<p>native hls playback error</p>';
            return;
        }
        setTimeout(loadHlsVideo, 500);
    });
    if(hlsVideo.canPlayType('application/vnd.apple.mpegurl')) {
        loadHlsVideo();
    } else {
        hlsVideo.parentElement.innerHTML = '<p>native hls not supported</p>';
    }
</script>

<script>
    const mjpegImg = document.getElementById('mjpegImg');
    mjpegImg.addEventListener('error', (evt) => {
        mjpegImg.parentElement.innerHTML = '<p>mjpeg playback error</p>';
    })
</script>

<script>
    const msePlayer = new VideoPlayer({
        video: document.getElementById('mseVideo'),
        io: io,
        namespace: 'mse',
        controls: ''
    }, (err, msg) => {
        if (err) {
            console.error('mse', err);
            console.log(document.getElementById('mseVideo').error);
        }
    }).start();
</script>

<script>
    window.addEventListener('beforeunload', (evt) => {
        stderrSocket.disconnect();
        progressSocket.disconnect();
        m3u8Socket.disconnect();
        mimeSocket.disconnect();
        jpegSocket.disconnect();
        mjpegImg.src = '';
        mp4Video.pause();
        hlsVideo.pause();
        hlsjsVideo.pause();
        msePlayer.stop();
    });
</script>

</body>
</html>