<!DOCTYPE html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title><%= title %></title>
    <link rel="stylesheet" href="/assets/material.red-orange.min.css"/>
    <script defer src="/assets/material.min.js"></script>
    <link rel='stylesheet' href='/stylesheets/style.css'/>
    <script src="/assets/flv.min.js"></script>
    <script src="/assets/hls.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
<div class="video">
    <div class="mp4">
        <p>mp4 via http <a href="/mp4/test.mp4">test.mp4</a></p>
        <video id="mp4Video" muted controls autoplay>
            <source src="/mp4/test.mp4" type="video/mp4">
        </video>
    </div>
    <div class="flv">
        <p>flv.js via http <a href="/mp4/test.mp4">test.mp4</a></p>
        <video id="flvVideo" muted controls autoplay></video>
    </div>
    <div class="hls">
        <p>hls.js via http <a href="/hls/test.m3u8">test.m3u8</a></p>
        <video id="hlsVideo" muted controls autoplay></video>
    </div>
    <div class="mjpeg">
        <p>mjpeg via http <a href="/mjpeg/test.mjpg">test.mjpg</a></p>
        <img id="mjpegImg" src="/mjpeg/test.mjpg"/>
    </div>
    <div class="jpeg">
        <p>jpeg via socket.io</p>
        <img id="jpegImg"/>
    </div>
    <div class="mse">
        <p>mse via socket.io</p>
        <video id="mseVideo" muted controls autoplay></video>
    </div>
    <div class="m3u8">
        <span id="m3u8">playlist...</span>
    </div>
    <div class="progress">
        <span id="progress">progress...</span>
    </div>

    <div class="params">
        <span><%= params %></span>
    </div>
    <div class="mime">
        <span id="mime">codec info...</span>
    </div>
    <div class="form">
        <form method="POST" action="/">
            <input name="action" type="submit" value="Exit"
                   class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent"/>
            <input name="action" type="submit" value="Stop"
                   class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent"/>
        </form>
    </div>
</div>
<script>
    if (flvjs.isSupported()) {
        const flvVideo = document.getElementById('flvVideo');
        const flvPlayer = flvjs.createPlayer({
            type: 'mp4',
            url: '/mp4/test.mp4',
            isLive: true
        });
        flvPlayer.attachMediaElement(flvVideo);
        flvPlayer.load();
        flvPlayer.play();
    }
</script>
<script>
    if (Hls.isSupported()) {
        const hlsVideo = document.getElementById('hlsVideo');
        const hls = new Hls();
        hls.loadSource('/hls/test.m3u8');
        hls.attachMedia(hlsVideo);
        hls.on(Hls.Events.MANIFEST_PARSED, function () {
            hlsVideo.play();
        });
    }
</script>
<script>
    const jpegImg = document.getElementById('jpegImg');
    const jpegSocket = io.connect(`${location.origin}/jpeg`, {
        transports: ['websocket'],
        forceNew: false,
        reconnection: true,
        reconnectionDelay: 500
    });
    jpegSocket.on('jpeg', function (data) {
        const arrayBufferView = new Uint8Array(data);
        const blob = new Blob([arrayBufferView], {type: 'image/jpeg'});
        const urlCreator = window.URL || window.webkitURL;
        const imageUrl = urlCreator.createObjectURL(blob);
        jpegImg.src = imageUrl;
    });
</script>
<script>
    const progress = document.getElementById('progress');
    const progressSocket = io.connect(`${location.origin}/progress`, {
        transports: ['websocket'],
        forceNew: false,
        reconnection: true,
        reconnectionDelay: 500
    });
    progressSocket.on('progress', function (data) {
        progress.innerText = data.toString();
    });
    setInterval(() => {
        progressSocket.emit('progressRequest');
    }, 1000);
</script>
<script>
    const m3u8 = document.getElementById('m3u8');
    const m3u8Socket = io.connect(`${location.origin}/m3u8`, {
        transports: ['websocket'],
        forceNew: false,
        reconnection: true,
        reconnectionDelay: 500
    });
    m3u8Socket.on('m3u8', function (data) {
        m3u8.innerText = data.toString();
    });
    setInterval(function () {
        m3u8Socket.emit('request');
    }, 1000);
</script>
<script>
    const mime = document.getElementById('mime');
    const mimeSocket = io.connect(`${location.origin}/mse`, {
        transports: ['websocket'],
        forceNew: false,
        reconnection: true,
        reconnectionDelay: 500
    });
    mimeSocket.on('mime', function (data) {
        const type = data.toString().toLowerCase();
        let message = type;
        if ('MediaSource' in window) {
            message += '\nMediaSource.isTypeSupported = ' + MediaSource.isTypeSupported(type);
        } else {
            message += '\nMediaSource not supported by browser';
        }
        const vid = document.createElement('video');
        message += '\nHTMLMediaElement.canPlayType = ' + vid.canPlayType(type);
        mime.innerText = message;
        mimeSocket.disconnect();
    });
    mimeSocket.emit('message', 'mime');
</script>
<script src="/javascripts/player.min.js"></script>
<script>
    const msePlayer = new VideoPlayer({
        video: document.getElementById('mseVideo'),
        io: io,
        namespace: 'mse',
        controls: ''
    }).start();
</script>
<script>

    const stderrSocket = io.connect(`${location.origin}/stderr`, {
        transports: ['websocket'],
        forceNew: false,
        reconnection: true,
        reconnectionDelay: 500
    });

    const stderr = document.getElementById('stderr');

    stderrSocket.on('stderr', function (data) {
        //stderr.innerText = data.toString();
        //will have to add to stderr, and truncate if too long
    });

    //setInterval(function () {
        //m3u8Socket.emit('request');
    //}, 1000);

    //not interval, full data stream, might be alot of data to manage

    stderrSocket.emit('requestStderr');

</script>
</body>
</html>